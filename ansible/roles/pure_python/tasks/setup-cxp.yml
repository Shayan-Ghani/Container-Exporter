- name: checkout to the repo
  git: 
    repo: "{{repo_addr}}"
    dest: "{{repo_path}}"

- name: check the python version
  shell:
    cmd: python3 --version | awk '{print $2}'
  register: python_version

# - debug:
#     msg: "{{ansible_facts.python_version}} , {{python_version.stdout}}
- name: run setup-env if py version not correct
  include_tasks: "{{playbook_dir}}/setup-pyvenv.yml"
  when: python_version.stdout is version('3.10.12', '<') 

- name: install required packages
  apt:
    name: "{{item}}"
    state: present
  loop: "{{packages}}"

- name: create virtualenv
  shell: pyenv virtualenv "{{venv_name}}"
  when: not no_pyenv
  register: venv_output
  failed_when: "'already exists' not in venv_output.stderr"
  
- fail:
    msg: "failed with custom message"
  when : "'already exists' not in venv_output.stderr"

- name: create venv without pyenv
  shell: 
    cmd: python3 -m venv "{{venv_name}}"
    chdir: "{{repo_path}}"
  when: no_pyenv

- name: install requirements.txt
  pip:
    requirements: requirements.txt
    virtualenv: "{{pyvenv_path}}"
    chdir: "{{repo_path}}"

- include_tasks: "{{playbook_dir}}/kill_processes.yml"

- name: deploy cxp
  shell:
    cmd: bash -c 'source {{pyvenv_path}}/bin/activate && bash start.sh &'
    chdir: "{{repo_path}}"

- name: wait for the port to be ready
  wait_for:
    port: 8250
    state: started
    timeout: 100

- name: download the metrics page 
  get_url:
    url: 'http://localhost:8000/metrics'
    dest: "{{target_dir}}/metrics.txt"

- name: fetch the metrics
  fetch:
    src: "{{target_dir}}/metrics.txt"
    dest: "{{playbook_dir}}/metrics.txt"
    flat: yes